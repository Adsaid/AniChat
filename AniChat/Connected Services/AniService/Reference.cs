//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AniChat.AniService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AniService.IServiceAniChat", CallbackContract=typeof(AniChat.AniService.IServiceAniChatCallback))]
    public interface IServiceAniChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Connect", ReplyAction="http://tempuri.org/IServiceAniChat/ConnectResponse")]
        int Connect(string name, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Connect", ReplyAction="http://tempuri.org/IServiceAniChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Disconnect", ReplyAction="http://tempuri.org/IServiceAniChat/DisconnectResponse")]
        void Disconnect(int id, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Disconnect", ReplyAction="http://tempuri.org/IServiceAniChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAniChat/SendMsg")]
        void SendMsg(string msg, int id, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAniChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int id, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Get_Chat_history", ReplyAction="http://tempuri.org/IServiceAniChat/Get_Chat_historyResponse")]
        string[] Get_Chat_history(string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Get_Chat_history", ReplyAction="http://tempuri.org/IServiceAniChat/Get_Chat_historyResponse")]
        System.Threading.Tasks.Task<string[]> Get_Chat_historyAsync(string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Set_Chat_history", ReplyAction="http://tempuri.org/IServiceAniChat/Set_Chat_historyResponse")]
        void Set_Chat_history(string[] hchat, string chatname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAniChat/Set_Chat_history", ReplyAction="http://tempuri.org/IServiceAniChat/Set_Chat_historyResponse")]
        System.Threading.Tasks.Task Set_Chat_historyAsync(string[] hchat, string chatname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAniChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAniChat/MsgCallback")]
        void MsgCallback(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAniChatChannel : AniChat.AniService.IServiceAniChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAniChatClient : System.ServiceModel.DuplexClientBase<AniChat.AniService.IServiceAniChat>, AniChat.AniService.IServiceAniChat {
        
        public ServiceAniChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceAniChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceAniChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAniChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAniChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name, string chatname) {
            return base.Channel.Connect(name, chatname);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name, string chatname) {
            return base.Channel.ConnectAsync(name, chatname);
        }
        
        public void Disconnect(int id, string chatname) {
            base.Channel.Disconnect(id, chatname);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id, string chatname) {
            return base.Channel.DisconnectAsync(id, chatname);
        }
        
        public void SendMsg(string msg, int id, string chatname) {
            base.Channel.SendMsg(msg, id, chatname);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int id, string chatname) {
            return base.Channel.SendMsgAsync(msg, id, chatname);
        }
        
        public string[] Get_Chat_history(string chatname) {
            return base.Channel.Get_Chat_history(chatname);
        }
        
        public System.Threading.Tasks.Task<string[]> Get_Chat_historyAsync(string chatname) {
            return base.Channel.Get_Chat_historyAsync(chatname);
        }
        
        public void Set_Chat_history(string[] hchat, string chatname) {
            base.Channel.Set_Chat_history(hchat, chatname);
        }
        
        public System.Threading.Tasks.Task Set_Chat_historyAsync(string[] hchat, string chatname) {
            return base.Channel.Set_Chat_historyAsync(hchat, chatname);
        }
    }
}
